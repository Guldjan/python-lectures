= slide 'Конкурентност vs. паралелизъм?' do
  p anyone?

= slide 'Похвати за конкурентност?' do
  list:
    процеси
    нишки
    "зелени" нишки

  p.action зелена нишка ∈ системна нишка ∈ процес

= slide 'Преди това...' do
  p Още малко за multiprocessing

= slide 'Паралелизиран map' do

  example:
    import urllib
    from multiprocessing import Pool

    urls = [
        'http://www.python.org',
        'http://www.python.org/about/',
        'http://github.com/',
        'http://kefche.com/',
    ]

    def fetch(url):
        try:
            return urllib.request.urlopen(url).status
        except urllib.error.URLError as e:
            return e.code

    pool = Pool(4)
    statuses = pool.map(fetch, urls)
    pool.close()
    pool.join()

= slide 'Gotchas' do
  p
    code fetch()
    |  трябва да е дефинирана преди конструирането на 
    code pool
    |  (спомнете си какво точно прави 
    code fork()
    | )

= slide 'yield from' do
  ul
    li Новост в Python 3.3
    li Делегиране на генератори

= slide 'Дърво 1.0' do
  p Да обхождаме дървета
  example:
    class Node:
        def __init__(self, value):
            self.left = []
            self.value = value
            self.right = []

        def iterate(self):
            for node in self.left:
                yield node.value
            yield self.value
            for node in self.right:
                yield node.value

  p Къде сбъркахме?

= slide 'Дърво 2.0' do
  example:
    ..
    def iterate(self):
        for node in self.left:
            yield from node.iterate()
        yield self.value
        for node in self.right:
            yield from node.iterate()

= slide 'concurrent.futures' do
  p Удобен модул за асинхронно изпълнение на неща
  example:
    +-- Future
    +-- Executor
      +-- ThreadPoolExecutor
      +-- ProcessPoolExecutor

= slide 'concurrent.futures.Future' do
  p
    | Обект, който енкапсулира нещо за изпълнение в конкурентна среда.
    | Държи състоянието му и ни дава удобен интерфейс за работа с него

  list:
    cancel()
    cancelled()
    running()
    done()
    result(timeout=None)
    exception(timeout=None)
    add_done_callback(fn)

= slide 'concurrent.futures.Executor' do
  p Не използваме `Future`-ите директно, а ги създаваме през съответния `Executor`
  list:
    submit(fn, *args, **kwargs)
    map(func, *iterables, timeout=None)
    shutdown(wait=True)

= slide 'Paralellizing CPU-bound tasks' do
  p Помните ли как ви казахме, че Python не може да решава такива проблеми?
  example:
    PRIMES = [
        112272535095293,
        112582705942171,
        112272535095293,
        115280095190773,
        115797848077099,
        1099726899285419]

    def is_prime(n):
      # ...

    def main():
        with concurrent.futures.ProcessPoolExecutor() as executor:
            for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
                print('{} is prime: {}'.format(number, prime))

  p
    a href='https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example' пълния пример

= slide 'Paralellizing CPU-bound tasks' do
  p Помните ли как ви казахме, че Python не може да решава такива проблеми?
  img src='14/troll-i-lied-light-l.png'

= slide 'Корутини' do
  p Малки независими изпълними единици, които кооперативно си предават контрол над управлението.

= slide 'Корутини' do
  img src='14/coroutines.png'

= slide 'greenlets' do
  list:
    Популярно решение за зелени нишки в python
    Имплементира описаната процедура по предаване на контрол
    Външен модул силно зависещ от native код

= slide 'asyncio' do
  p 
    | В python 3.4 се появява модула 
    code asyncio

  p Важно е да си в event loop-а. Той отговаря за предаването на контрола между корутините

= slide 'Event loop' do
  p 
    | Искаме да реагираме на 
    em събитие 
    |  по определен начин
  p 
    | Event loop-а проверява на определен(относително кратък) период от време дали се е случило 
    em събитие
    | и ни уевдомява, за да можем да реагираме

= slide 'Event loop' do
  p Когато използваме asyncio всяка нишка има по един event loop, отговарящ за задачите в нея
  ul 
    li
      code asyncio.get_event_loop
      | - връща текущия event loop обект за нишката, в която сме
    li
      code asyncio.set_event_loop
      | - позволява да променим event loop-а за текущата нишка
    li
      code asyncio.set_event_loop_policy
      | - позволява да променим политиката на event loop-а за текущата нишка(не е просто)
    li
      code asyncio.get_event_loop_policy
    li
      code asyncio.is_running
      | - проверява дали текущия loop "се върти"

= slide 'Event loop' do
  p GO! GO! GO!
  ul
    li
      code loop.run_until_complete(coroutine)
      | - пускаме 
      b събитийния цикъл
      |  и той ще спре когато подадената корутина приключи изпълнението си
    li
      code loop.run_forever()
      | - пускаме 
      b събитийния цикъл
      |  "завинаги", т.е. докато изрично не го спрем
    li
      code loop.stop()
      | - спираме съответния loop

=slide 'Пример' do
  p който ще наречем "прост"
  p
    a href='https://gist.github.com/kunev/f83146d407c81a2d64a6' gist
